class Solution {
  public:
    vector<int> largestSquare(vector<vector<int>> M, int R, int C, int K, int Q, int q_i[], int q_j[]) {
        // code here
         // Loop to solve for each query
             vector<int> ans;
             if(K == 0 && R == 1 && C == 1){
                 ans.push_back(0);
                 return ans;
             }

        int countDP[R][C];
       memset(countDP, 0, sizeof(countDP));
   
       // Precomputing the countDP 
       // prefix sum of the matrix
       countDP[0][0] = M[0][0];
       for (int i = 1; i < R; i++)
           countDP[i][0] = countDP[i - 1][0] + 
                                M[i][0];
       for (int j = 1; j < C; j++)
           countDP[0][j] = countDP[0][j - 1] +
                                M[0][j];
       for (int i = 1; i < R; i++)
           for (int j = 1; j < C; j++)
               countDP[i][j] = M[i][j] +
                          countDP[i - 1][j] +
                          countDP[i][j - 1] -
                          countDP[i - 1][j - 1];
       
       // Loop to solve Queries
       for (int q = 0; q < Q; q++) {
           int i = q_i[q];
           int j = q_j[q];
           // Calculating the maximum
           // possible distance of the
           // centre from edge
           int min_dist = min(min(i, j), 
             min(R - i - 1, C - j - 1));
           int res = -1;
           for (int k = 0; k <= min_dist;
                                     k++) {
               int x1 = i - k, x2 = i + k;
               int y1 = j - k, y2 = j + k;
               
               // Calculating the number of 1s in the submatrix
               int count = countDP[x2][y2];
               if (x1 > 0)
                   count -= countDP[x1 - 1][y2];
               if (y1 > 0)
                   count -= countDP[x2][y1 - 1];
               if (x1 > 0 && y1 > 0)
                   count += countDP[x1 - 1][y1 - 1];
   
               if (count > K)
                   break;
               res = 2 * k + 1;
           }
           // cout << res << "\n";
           if(res < 0)
               ans.push_back(0);
           else
               ans.push_back(res);
       }
       return ans;
    }
};
